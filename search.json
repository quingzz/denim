[{"path":"/articles/denim.html","id":"simple-sir-model-with-gamma-distribution-length-of-stay","dir":"Articles","previous_headings":"","what":"1. Simple SIR model with gamma distribution length of stay","title":"denim: deterministic discrete time model with memory","text":"SIR model use three compartments S (susceptible), (infected), R (recovered) describe clinical status individuals. use simple form SIR model demonstrate define length stay distribution. model equations : \\[S_{t+1} - S_{t} = -\\lambda S_{t} = -\\frac{\\beta I_{t}}{N}S_{t}\\] \\[I_{t+1} - I_{t} = \\frac{\\beta I_{t}}{N}S_{t} - \\gamma I_{t}\\] \\[R_{t+1} - R_{t} = \\gamma I_{t}\\] \\(N\\): total population size, \\(N = S + + R\\) \\(\\beta\\): product contact rates transmission probability; usually define \\(\\lambda =\\frac{\\beta I_{t}}{N}\\) force infection \\(\\gamma\\): recovery rate Usually solve model easier make assumption recovery rate \\(\\gamma\\) constant, leads exponentially distributed length stay .e individuals recover 1 day infected.  realistic length stay distribution can look like , patients recovered 4 days. defined using gamma distribution shape = 3 scale = 2.  model now look like : Model specification Model transition two transitions S -> -> R case. transitions specified list follow format \"transition\" = equation, equation defined one functions waiting time distribution. Initial state Use vector define compartments assigned names initial values format compartment_name = initial_value: Model parameters use math expression, symbols except compartment names parameters, defined constant values. two constant parameters example: beta N: Model application Time step specification run model 30 days give output 0.01 daily intervals. default interval (time step) 1 declared explicitly.","code":"transitions <- list(   \"S -> I\" = mathexpr(beta * S * I / N),   \"I -> R\" = gamma(3, 2) ) initialValues <- c(   S = 999,    I = 1,    R = 0 ) parameters <- c(   beta = 0.012,   N = 1000 ) simulationDuration <- 30 timeStep <- 0.01 mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) #> Simulating... #> Simulation completed, elapsed time: 0.0940 seconds head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.9880 1.011982 5.543225e-06 #> 3 0.02 998.9759 1.024097 2.219016e-05 #> 4 0.03 998.9636 1.036346 5.000038e-05 #> 5 0.04 998.9512 1.048730 8.903457e-05 #> 6 0.05 998.9386 1.061252 1.393545e-04 plot(mod)"},{"path":"/articles/denim.html","id":"how-the-algorithm-work","dir":"Articles","previous_headings":"","what":"2. How the algorithm work?","title":"denim: deterministic discrete time model with memory","text":"SIR model, infected individuals presented single compartment recovery rate \\(\\gamma\\). want recovery rate individuals infected 1 day differ recovery rate 2-day infected patients. rather using one compartment infected (), define multiple infected sub-compartments. number sub-compartments depends maximum day expect infected individuals recovered. example, expect disease maximum 4 days infection, end 4 sub-compartments. sub-compartment recovery rate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\), \\(\\gamma_{4}\\). day 4 certain patient recover (assume disease maximum 4 days infection), \\(\\gamma_{4} = 1\\). Let \\(R_1 + R_2 + R_3 + R_4 = \\Sigma R\\). \\(\\frac{R_1}{\\Sigma R} = p_1\\), \\(\\frac{R_2}{\\Sigma R} = p_2\\), \\(\\frac{R_3}{\\Sigma R} = p_3\\), \\(\\frac{R_4}{\\Sigma R} = p_4\\). mission estimate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) obtain \\(p_1\\), \\(p_2\\), \\(p_3\\), \\(p_4\\) fit pre-defined distribution equilibrium state. can obtained setting: \\[\\gamma_{} = \\frac{p_i}{1 - \\sum_{j=1}^{-1}p_j}\\] given length stay distribution, identify maximum length stay using cumulative distribution function. cumulative distribution function asymptotic 1 never equal 1, need set value acceptable rounded 1. want cumulative probability 0.999 rounded 1, set error tolerance threshold 1 - 0.999 = 0.001 (specified argument errorTolerance = 0.001). time cumulative probability = 0.999 set maximum length stay compartment. Default errorTolerance denim set 0.001.","code":""},{"path":"/articles/denim.html","id":"waiting-time-distribution","dir":"Articles","previous_headings":"","what":"3. Waiting time distribution","title":"denim: deterministic discrete time model with memory","text":"Current available distribution package including: exponential(rate): Discrete exponential distribution parameter rate gamma(scale, shape): Discrete gamma distribution parameters scale shape weibull(scale, shape): Discrete Weibull distribution parameters scale shape lognormal(mu, sigma): Discrete log-normal distribution parameters mu sigma mathexpr(expression): User-defined mathematical expression, expression can put inside \"\" , e.g mathexpr(beta * S * / N) mathexpr(\"beta * S * / N\") acceptable constant(x): Every time step fixed number individuals left compartment transit right compartment, e.g \"S -> V\" = constant(50) means 50 people got vaccinated per day transprob(x): Every time step fixed percentage left compartment transit right compartment, also convenient way define \\(R_t - R_{t-1} = \\gamma \\) can input \"-> R\" = transprob(gamma) nonparametric(waitingTimes...): vector values, numbers, percentages, density length stay based real data, denim convert distribution multinomial(probabilities): convenient way define several probabilities compartment transit many compartments, may may time step. example, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) means 60% V become VA, 30% become VS 10% become VH. continue define length stay distribution transitions e.g \"V -> VA\" = gamma(3, 2), probabilities defined multinomial() percentage left compartment transit time step, percentage individuals move VA equilibrium state. define length stay distribution, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) percentage V transit right compartments per time step similar transprob() function. See detailed explanations Multiple transitions compartment section.","code":""},{"path":"/articles/denim.html","id":"multiple-transitions-from-a-compartment","dir":"Articles","previous_headings":"","what":"4. Multiple transitions from a compartment","title":"denim: deterministic discrete time model with memory","text":"many ways define type transition two transitions compartment. Consider example: two scenarios example: Susceptible individuals can infected vaccinated. assumption infected first (S -> ), rest infected get vaccinated (S -> V). Infected individuals can recover die. mortality probability known, can implement model, example defining 0.9 * -> R (90% individuals recover) 0.1 * -> D (10% die). , ensure mortality probability 10%, also define length stay individuals infected state recover die follows gamma log-normal distribution, respectively. can define model example follows:  Tips: Instead writing: can also use multinomial(), define length stay distribution obtain result:","code":"transitions <- list(   \"S -> I\" = mathexpr(beta * S * I / N),   \"S -> V\" = constant(7),   \"0.9 * I -> R\" = gamma(3, 2),   \"0.1 * I -> D\" = lognormal(2, 0.5) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) #> Simulating... #> Simulation completed, elapsed time: 0.0410 seconds plot(mod) \"0.9 * I -> R\" = gamma(3, 2), \"0.1 * I -> D\" = lognormal(2, 0.5) \"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = gamma(3, 2), \"I -> D\" = lognormal(2, 0.5)"},{"path":"/articles/denim.html","id":"another-example","dir":"Articles","previous_headings":"","what":"5. Another example","title":"denim: deterministic discrete time model with memory","text":"","code":"transitions <- list(   \"S -> I\" = mathexpr(beta * S * (I + IV) / N),   \"S -> V\" = constant(2),   \"0.1 * I -> D\" = lognormal(2, 0.5),   \"0.9 * I -> R\" = gamma(3, 2),   \"V -> IV\" = mathexpr(0.1 * beta * V * (I + IV) / N),   \"IV -> R\" = exponential(2) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   IV = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) #> Simulating... #> Simulation completed, elapsed time: 0.0690 seconds plot(mod)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thinh Ong. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ong T, Choisy M (2022). denim: Simulate deterministic discrete time model. R package version 1.0.","code":"@Manual{,   title = {denim: Simulate deterministic discrete time model},   author = {Thinh Ong and Marc Choisy},   year = {2022},   note = {R package version 1.0}, }"},{"path":"/index.html","id":"denim-","dir":"","previous_headings":"","what":"Simulate deterministic discrete time model","title":"Simulate deterministic discrete time model","text":"R package simulating deterministic discrete-time model memory.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate deterministic discrete time model","text":"Use install_github() install package","code":"remotes::install_github(\"thinhong/denim\", build_vignettes = TRUE)"},{"path":[]},{"path":"/index.html","id":"simple-sir-model","dir":"","previous_headings":"Example","what":"Simple SIR model","title":"Simulate deterministic discrete time model","text":"define: * daysFollowUp: many days (unit time) simulate * errorTolerance: decimal number, probability reach (1 - errorTolerance) rounded 1.0, e.g set errorTolerance <- 0.01 probability 0.99 rounded 1.0 * timeStep: much day binned, want bin day 100 time bins, time step 0.01 day, define timeStep <- 0.01 * initialValues: vector defines initial values compartments * parameters: define compartment transition using math expression, list parameters (except compartment names) inside math expression * transitions: list format \"transition\" = distribution() * \"transition\": structure model, e.g simple SIR model S -> -> R defined \"S -> \", \"-> R\" (note \"\" symbol, read strings), white space can ignored .e can write \"S->\" * \"S -> \", \"S -> V\": compartment S transitions first, rest S transitions V * \"S -> 0.3 * \", \"S -> 0.7 * V\": S transitions V concurrently, 30% transitions 70% transitions V * distributions: distributions compartments, currently followings available: * exponential(rate) * gamma(scale, shape) * weibull(scale, shape) * mathexpr(expression): user-defined math expression, expression can put inside \"\" , e.g mathexpr(beta * S * / N) mathexpr(\"beta * S * / N\") acceptable * frequency(frequency): fixed number individuals per time step, e.g \"S -> V\" = frequency(50) means 50 people got vaccinated per day * transprob(transitionProb): define transition probability instead waiting time distribution, conventional dR/dt = gamma * input \"-> R\" = transprob(gamma) * values(waitingTimes...): vector values, numbers, percentages, density based real data distribution","code":"library(denim)  initialValues <- c(   S = 999,    I = 1,    R = 0,    V = 0,    IV = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  transitions <- list(   \"0.3 * S -> I\" = mathexpr(beta * S * (I + IV) / N),   \"0.7 * S -> V\" = constant(2),   \"I -> R\" = gamma(3, 2),   \"V -> IV\" = mathexpr(beta * 0.3 * V * (I + IV) / N),   \"IV -> R\" = exponential(2) )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions, initialValues = initialValues,             parameters = parameters, simulationDuration = simulationDuration,             timeStep = timeStep)"},{"path":"/index.html","id":"visualization","dir":"","previous_headings":"Example","what":"Visualization","title":"Simulate deterministic discrete time model","text":"can plot data frame generated sim() function plot(). plot() function use ggplot2 visualize.","code":"plot(mod)"},{"path":"/index.html","id":"comparison-with-desolve","dir":"","previous_headings":"Example","what":"Comparison with deSolve","title":"Simulate deterministic discrete time model","text":"Binning timeStep 0.001 closest results deSolve. results follows package vs deSolve","code":"library(deSolve) library(denim) library(ggplot2) library(tidyr)  # deSolve sir_equations <- function(time, variables, parameters) {   with(as.list(c(variables, parameters)), {     dS <- -beta * (I1 + I2 + I3 + I4 + I5) * S     dI1 <- (beta * (I1 + I2 + I3 + I4 + I5) * S) - (gamma * I1)     dI2 <- (gamma * I1) - (gamma * I2)     dI3 <- (gamma * I2) - (gamma * I3)     dI4 <- (gamma * I3) - (gamma * I4)     dI5 <- (gamma * I4) - (gamma * I5)     dR <-  gamma * I5     return(list(c(dS, dI1, dI2, dI3, dI4, dI5, dR)))   }) }  parameters_values <- c(beta  = 0.0015, gamma = 0.5) initial_values <- c(S = 999, I1 = 1, I2 = 0, I3 = 0, I4 = 0, I5 = 0, R = 0) time_values <- seq(0, 20)  dsmod <- ode(   y = initial_values,   times = time_values,   func = sir_equations,   parms = parameters_values )  ## Sum up I1 + I2 + I3 + I4 + I5 to get the final I compartment dsmod <- as.data.frame(dsmod) dsmod$I <- rowSums(dsmod[,grep(\"I\", colnames(dsmod))]) dsmod <- dsmod[, c(\"time\", \"S\", \"I\", \"R\")] colnames(dsmod)[-1] <- paste0(colnames(dsmod)[-1], \"_deSolve\")  # Our method initialValues <- c(S = 999, I = 1, R = 0) parameters <- c(beta = 0.0015, N = 1000) transitions <- list(\"S -> I\" = mathexpr(beta * S * I / N),                      \"I -> R\" = gamma(2, 5))  fmod <- sim(daysFollowUp = 20, errorTolerance = 0.01,              timeStep = 0.001,             transitions = transitions,             initialValues = initialValues, parameters = parameters)  # Merge the two results data frame to compare colnames(fmod)[-1] <- paste0(colnames(fmod)[-1], \"_discrete\") df2 <- merge(dsmod, fmod, by.x = \"time\", by.y = \"Time\")  # We can make comparison by viewing the merged data frame df2  # Or plot them using these ggplot2 codes df_plot <- gather(df2, key = \"Compartment\", value = \"Value\", grep(\"time\", colnames(df2), invert = T)) df_plot$package <- sapply(df_plot$Compartment, function(x) {a <- strsplit(x, \"_\")[[1]]; b <- a[length(a)]; return(b)}) df_plot$Compartment <- gsub(\"_deSolve|_discrete\", \"\", df_plot$Compartment) df_plot$Compartment <- factor(df_plot$Compartment)  ggplot(df_plot, aes(x = time, y = Value, col = Compartment)) +   geom_line(size = 1) + facet_wrap(~ package) +   theme_minimal() +   theme(text = element_text(size = 14)) time    S_deSolve  I_deSolve    R_deSolve   S_discrete I_discrete   R_discrete 1     0 9.990000e+02   1.000000 0.000000e+00 9.990000e+02   1.000000 0.000000e+00 2     1 9.955339e+02   4.465856 2.303639e-04 9.955389e+02   4.460865 2.301190e-04 3     2 9.802964e+02  19.696340 7.267827e-03 9.803393e+02  19.653437 7.257803e-03 4     3 9.174280e+02  82.509558 6.244174e-02 9.176736e+02  82.264069 6.232200e-02 5     4 7.128656e+02 286.788494 3.458764e-01 7.136823e+02 285.972686 3.449851e-01 6     5 3.570668e+02 641.372446 1.560792e+00 3.580034e+02 640.440678 1.555952e+00 7     6 1.108652e+02 883.247525 5.887297e+00 1.112038e+02 882.927489 5.868694e+00 8     7 2.753151e+01 954.609024 1.785947e+01 2.759597e+01 954.594431 1.780960e+01 9     8 6.560794e+00 950.121748 4.331746e+01 6.568916e+00 950.212553 4.321853e+01 10    9 1.618453e+00 911.744233 8.663731e+01 1.618522e+00 911.901014 8.648046e+01 11   10 4.304366e-01 850.902950 1.486666e+02 4.299393e-01 851.114669 1.484554e+02 12   11 1.270917e-01 773.290746 2.265822e+02 1.267988e-01 773.543162 2.263300e+02 13   12 4.253584e-02 684.835925 3.151215e+02 4.239289e-02 685.110767 3.148468e+02 14   13 1.632456e-02 591.799588 4.081841e+02 1.625438e-02 592.078497 4.079052e+02 15   14 7.202036e-03 499.863552 5.001292e+02 7.165272e-03 500.131156 4.998617e+02 16   15 3.633768e-03 413.460732 5.865356e+02 3.612778e-03 413.706068 5.862903e+02 17   16 2.074540e-03 335.535057 6.644629e+02 2.061332e-03 335.751685 6.642463e+02 18   17 1.321349e-03 267.628893 7.323698e+02 1.312357e-03 267.814259 7.321844e+02 19   18 9.245871e-04 210.148809 7.898503e+02 9.179818e-04 210.303240 7.896958e+02 20   19 6.998868e-04 162.688892 8.373104e+02 6.946921e-04 162.814630 8.371847e+02 21   20 5.649312e-04 124.335796 8.756636e+02 5.606225e-04 124.436154 8.755633e+02"},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant — constant","title":"Constant — constant","text":"Define fixed number individuals left compartment transit right compartment every time step","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant — constant","text":"","code":"constant(x)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constant — constant","text":"x constant number","code":""},{"path":"/reference/denim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"denim — denim-package","title":"denim — denim-package","text":"Simulate deterministic discrete time model","code":""},{"path":"/reference/denim-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denim — denim-package","text":"Imports","code":""},{"path":"/reference/distributionToJson.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution object to json — distributionToJson","title":"Distribution object to json — distributionToJson","text":"Input distribution object compartment, full vector/list distributions","code":""},{"path":"/reference/distributionToJson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution object to json — distributionToJson","text":"","code":"distributionToJson(distribution)"},{"path":"/reference/distributionToJson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution object to json — distributionToJson","text":"distribution list elements $name, $rate / $scale / $shape...","code":""},{"path":"/reference/distributionToJson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution object to json — distributionToJson","text":"json object match format \"distribution\": \"weibull\", \"scale\": 2, \"shape\": 5","code":""},{"path":"/reference/exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete exponential distribution — exponential","title":"Discrete exponential distribution — exponential","text":"Discrete exponential distribution","code":""},{"path":"/reference/exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete exponential distribution — exponential","text":"","code":"exponential(rate)"},{"path":"/reference/exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete exponential distribution — exponential","text":"rate rate parameter exponential distribution","code":""},{"path":"/reference/gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete gamma distribution — gamma","title":"Discrete gamma distribution — gamma","text":"Discrete gamma distribution","code":""},{"path":"/reference/gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete gamma distribution — gamma","text":"","code":"gamma(scale, shape)"},{"path":"/reference/gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete gamma distribution — gamma","text":"scale scale parameter gamma distribution shape shape parameter gamma distribution","code":""},{"path":"/reference/lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete log-normal distribution — lognormal","title":"Discrete log-normal distribution — lognormal","text":"Discrete log-normal distribution","code":""},{"path":"/reference/lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete log-normal distribution — lognormal","text":"","code":"lognormal(mu, sigma)"},{"path":"/reference/lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete log-normal distribution — lognormal","text":"mu location parameter ln mean sigma scale parameter ln standard deviation","code":""},{"path":"/reference/mathexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical expression — mathexpr","title":"Mathematical expression — mathexpr","text":"User-defined mathematical expression. expression processed muparser library offers wide variety operators. Kindly visit muparser website see full list available operators.","code":""},{"path":"/reference/mathexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical expression — mathexpr","text":"","code":"mathexpr(expression)"},{"path":"/reference/mathexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical expression — mathexpr","text":"expression math expression, can put inside \"\" , e.g mathexpr(beta * S * / N) mathexpr(\"beta * S * / N\") acceptable","code":""},{"path":"/reference/multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial — multinomial","title":"Multinomial — multinomial","text":"Define set probabilities transition one compartment multiple compartments equal ","code":"\"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = gamma(3, 2), \"I -> D\" = lognormal(2, 0.5) \"0.9 * I -> R\" = gamma(3, 2), \"0.1 * I -> D\" = lognormal(2, 0.5)"},{"path":"/reference/multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial — multinomial","text":"","code":"multinomial(...)"},{"path":"/reference/multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial — multinomial","text":"... vector probabilities, must add 1","code":""},{"path":"/reference/nonparametric.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonparametric — nonparametric","title":"Nonparametric — nonparametric","text":"Convert vector frequencies, percentages... distribution","code":""},{"path":"/reference/nonparametric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonparametric — nonparametric","text":"","code":"nonparametric(...)"},{"path":"/reference/nonparametric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonparametric — nonparametric","text":"... vector values","code":""},{"path":"/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulator for deterministic discrete time model with memory — sim","title":"Simulator for deterministic discrete time model with memory — sim","text":"Simulation function call C++ simulator","code":""},{"path":"/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"sim(   transitions,   initialValues,   parameters,   simulationDuration,   timeStep = 1,   errorTolerance = 0.001 )"},{"path":"/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator for deterministic discrete time model with memory — sim","text":"transitions list transitions follows format \"transition\" = distribution() initialValues vector contains initial values compartments defined transitions, follows format compartment_name = initial_value parameters vector contains values parameters compartments, usually parameters used mathexp() functions simulationDuration duration time simulate timeStep set output time interval. example, simulationDuration = 10 means 10 days timeStep = 0.1, output display results 0.1 daily interval errorTolerance set threshold cumulative distribution function can rounded 1. example, want cumulative probability 0.999 rounded 1, set errorTolerance = 0.001 (1 - 0.999 = 0.001). Default 0.001","code":""},{"path":"/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulator for deterministic discrete time model with memory — sim","text":"data.frame class denim can plotted plot() method","code":""},{"path":"/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"transitions <- list(    \"S -> I\" = mathexpr(beta * S * I / N),    \"I -> R\" = gamma(3, 2) )  initialValues <- c(    S = 999,     I = 1,     R = 0 )  parameters <- c(    beta = 0.012,    N = 1000 )  simulationDuration <- 30 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) #> Simulating... #> Simulation completed, elapsed time: 0.0960 seconds"},{"path":"/reference/transprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition probability — transprob","title":"Transition probability — transprob","text":"fixed percentage left compartment transit right compartment every time step","code":""},{"path":"/reference/transprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition probability — transprob","text":"","code":"transprob(x)"},{"path":"/reference/transprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition probability — transprob","text":"x float number 0 1","code":""},{"path":"/reference/weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete Weibull distribution — weibull","title":"Discrete Weibull distribution — weibull","text":"Discrete Weibull distribution","code":""},{"path":"/reference/weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete Weibull distribution — weibull","text":"","code":"weibull(scale, shape)"},{"path":"/reference/weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete Weibull distribution — weibull","text":"scale scale parameter Weibull distribution shape shape parameter Weibull distribution","code":""}]
