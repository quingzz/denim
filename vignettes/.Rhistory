update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
file.path(Sys.getenv("HOME"), ".Renviron")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::check()
?devtools::check
devtools::load_all()
pkgdown::build_article("denim")
pkgdown::preview_site(path='articles/denim.html')
pkgdown::build_site(lazy = TRUE)
pkgdown::build_article("denim")
pkgdown::build_article("denim")
?pkgdown::build_article
pkgdown::build_article("denim", lazy=FALSE)
pkgdown::build_article("denim", lazy=FALSE)
pkgdown::build_article("deSolve_to_denim", lazy=FALSE)
library(deSolve)
parameters <- c(scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2,
R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
tr = scale_R*shape_R
dS = - (R0/tr) * S * I/N
# apply linear chain trick
dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = gamma_rate_I*E2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI =  dI1 + dI2
dR = gamma_rate_R*I2
list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))
})
}
times <- seq(0, sim_duration, 1)
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
times <- seq(0, sim_duration, 1)
# ------ Compute run time ------
desolve_runs <- bench::mark(
ode(y = initialValues, times = times, parms = parameters, func = transition_func),
iterations = total_runs
)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
ode_mod <- as.data.frame(ode_mod)
desolve_runs$time
# compile model
# system("R CMD SHLIB supplements/desolve_mod/benchmark_mod.c")
# compiled file on Windows will have .dll extension instead of .so
dyn.load("../supplements/desolve_mod/benchmark_mod.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_c_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod", initfunc = "initmod"),
iterations = total_runs
)
dyn.unload("../supplements/desolve_mod/benchmark_mod.so")
deSolve_c_runs$time
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.o")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.o")
?dyn.load
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
library(deSolve)
parameters <- c(scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2,
R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
# --- Transition def for deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate_I = 1/scale_I
gamma_rate_R = 1/scale_R
tr = scale_R*shape_R
dS = - (R0/tr) * S * I/N
# apply linear chain trick
dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1
dE2 = gamma_rate_I*E1 - gamma_rate_I*E2
dE = dE1 + dE2
dI1 = gamma_rate_I*E2 - gamma_rate_R*I1
dI2 = gamma_rate_R*I1 - gamma_rate_R*I2
dI =  dI1 + dI2
dR = gamma_rate_R*I2
list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))
})
}
times <- seq(0, sim_duration, 1)
# ------ Compute run time ------
desolve_runs <- bench::mark(
ode(y = initialValues, times = times, parms = parameters, func = transition_func),
iterations = total_runs
)
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
ode_mod <- as.data.frame(ode_mod)
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.o")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system.file("etc", "Makeconf", package = "base")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD config FC")
system("R CMD config FLIBS")
Sys.getenv("R_MAKEVARS_USER")
system("R CMD config FC")
system("R CMD config FLIBS")
system("R CMD config FC")
system("R CMD config FLIBS")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod", initfunc = "initmod"),
iterations = total_runs
)
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod", initfunc = "initmod"),
iterations = total_runs
)
library(deSolve)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod", initfunc = "initmod"),
iterations = total_runs
)
times <- seq(0, sim_duration, 1)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod", initfunc = "initmod"),
iterations = total_runs
)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.o")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
deSolve_fortran_runs
deSolve_fortran_runs$time
# compile model in fortran
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
# compile model in fortran
# system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_c_out[, c("S","E", "I", "R")] <- desolve_c_out[, c("S","E", "I", "R")]/1e6
plot_seir_util <- function(df, mod_name="denim", time_col = "Time",
ylab = "Proportion",
x_legend=150, y_legend=0.7){
plot(x = df[[time_col]], y = df[["S"]],
xlab = "time", ylab = "Prop", ylim = c(0, 1),
main=paste0(mod_name, " output"), col = "#4876ff", type="l", lwd=2)
lines(df[[time_col]], df[["E"]], lwd=2, col = "blueviolet")
lines(df[[time_col]], df[["I"]], lwd=2, col = "red")
lines(df[[time_col]], df[["R"]], lwd=2, col = "green")
legend(x = x_legend, y = y_legend,
legend=c("S", "E", "I", "R"),
col = c("#4876ff", "blueviolet", "red", "green"),
lty = 1)
}
plot_seir_util(desolve_c_out, time_col = "time", mod_name = "deSolve")
# compile model in fortran
# system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_fortran <- desolve_c_out |> as.data.frame()
desolve_fortran[, c("S","E", "I", "R")] <- desolve_fortran[, c("S","E", "I", "R")]/1e6
plot_seir_util(desolve_fortran, time_col = "time", mod_name = "deSolve")
desolve_c_out
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_c_out
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
parameters
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_c_out
View(desolve_c_out)
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
desolve_c_out
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_c_out
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_c_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_c_out
as.tibble(desolve_c_out)
tibble::as_tibble(desolve_c_out)
tibble::as_tibble(desolve_c_out) %>% class()
library(magrittr)
tibble::as_tibble(desolve_c_out) %>% class()
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
system("R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f")
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
desolve_f_out <- ode(initialValues, times, func = "derivs", parms = parameters, dllname = "benchmark_mod_fortran", initfunc = "initmod")
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
desolve_f_out
desolve_fortran <- desolve_f_out |> as.data.frame()
desolve_fortran[, c("S","E", "I", "R")] <- desolve_fortran[, c("S","E", "I", "R")]/1e6
plot_seir_util(desolve_fortran, time_col = "time", mod_name = "deSolve")
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
dyn.load("../supplements/desolve_mod/benchmark_mod_fortran.so")
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
deSolve_fortran_runs <- bench::mark(
# run model defined in C
ode(initialValues, times, func = "derivs", parms = parameters,
dllname = "benchmark_mod_fortran", initfunc = "initmod"),
iterations = total_runs
)
dyn.unload("../supplements/desolve_mod/benchmark_mod_fortran.so")
deSolve_fortran_runs$time
pkgdown::build_article("denim_benchmark")
library(arrow)
library(reticulate)
df <- as.data.frame(py$to_r_df)
# comput prop to compare with uSEIR
rescaled_denim <- denim_out
pkgdown::build_article("denim_benchmark")
pkgdown::preview_page('articles/denim_benchmark.html')
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> E [label = '(R0/tr) * S * (I / N) * td']
E -> I [label = 'd_gamma(4,2)']
I -> R [label = 'd_gamma(3,2)']
}",
width = 700, height = "100%")
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
library(reticulate)
# use_python("/opt/anaconda3/envs/bnn/bin/python", required = TRUE)
use_condaenv(condaenv='bnn', required = TRUE)
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
py_run_file("../supplements/useir_python.py")
reticulate::repl_python()
