geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 2, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
xlim(-2,  total_runs + 10) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
# ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
benchmark_runs <- list(
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"IONISE" = cached_runtime$ionise,
"diffeqr (R)" = cached_runtime$diffeqr_base_runs,
"diffeqr (Julia)" = cached_runtime$diffeqr_optimized_runs,
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
discrete_time <- c(
"odin", "denim", "denim (nonparametric)", "uSEIR (Python)", "uSEIR (Cython)"
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times),
model_time = if_else(method %in% discrete_time, "discrete", "continuous")
)
})
# Apply log transform if specified
# if (apply_log) {
#   plot_df$time <- log(plot_df$time)
# }
# Compute medians for each method
medians <- plot_df %>%
group_by(method, model_time) %>%
mutate(median_time = median(time)) %>%
ungroup()
# Create the plot
runtime_plot <- ggplot(plot_df, aes(x = run, y = time, color = method, shape = model_time)) +
geom_point(alpha = 0.7,
show.legend = c(color = FALSE, shape = TRUE)) +
# geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 3, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
xlim(-2,  total_runs + 10) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
# ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
benchmark_runs <- list(
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"IONISE" = cached_runtime$ionise,
"diffeqr (R)" = cached_runtime$diffeqr_base_runs,
"diffeqr (Julia)" = cached_runtime$diffeqr_optimized_runs,
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
discrete_time <- c(
"odin", "denim", "denim (nonparametric)", "uSEIR (Python)", "uSEIR (Cython)"
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times),
model_time = if_else(method %in% discrete_time, "discrete", "continuous")
)
})
# Apply log transform if specified
# if (apply_log) {
#   plot_df$time <- log(plot_df$time)
# }
# Compute medians for each method
medians <- plot_df %>%
group_by(method, model_time) %>%
mutate(median_time = median(time)) %>%
ungroup()
# Create the plot
runtime_plot <- ggplot(plot_df, aes(x = run, y = time, color = method, shape = model_time)) +
geom_point(alpha = 0.7,
show.legend = c(color = FALSE, shape = TRUE)) +
# geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 3, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
xlim(-2,  total_runs + 12) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
# ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
benchmark_runs <- list(
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"IONISE" = cached_runtime$ionise,
"diffeqr (R)" = cached_runtime$diffeqr_base_runs,
"diffeqr (Julia)" = cached_runtime$diffeqr_optimized_runs,
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
discrete_time <- c(
"odin", "denim", "denim (nonparametric)", "uSEIR (Python)", "uSEIR (Cython)"
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times),
model_time = if_else(method %in% discrete_time, "discrete", "continuous")
)
})
# Apply log transform if specified
# if (apply_log) {
#   plot_df$time <- log(plot_df$time)
# }
# Compute medians for each method
medians <- plot_df %>%
group_by(method, model_time) %>%
mutate(median_time = median(time)) %>%
ungroup()
# Create the plot
runtime_plot <- ggplot(plot_df, aes(x = run, y = time, color = method, shape = model_time)) +
geom_point(alpha = 0.7,
show.legend = c(color = FALSE, shape = TRUE)) +
# geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 3, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
xlim(-2,  total_runs + 12) +
scale_x_continuous(limits = c(0, 50)) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
# ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
benchmark_runs <- list(
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"IONISE" = cached_runtime$ionise,
"diffeqr (R)" = cached_runtime$diffeqr_base_runs,
"diffeqr (Julia)" = cached_runtime$diffeqr_optimized_runs,
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
discrete_time <- c(
"odin", "denim", "denim (nonparametric)", "uSEIR (Python)", "uSEIR (Cython)"
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times),
model_time = if_else(method %in% discrete_time, "discrete", "continuous")
)
})
# Apply log transform if specified
# if (apply_log) {
#   plot_df$time <- log(plot_df$time)
# }
# Compute medians for each method
medians <- plot_df %>%
group_by(method, model_time) %>%
mutate(median_time = median(time)) %>%
ungroup()
# Create the plot
runtime_plot <- ggplot(plot_df, aes(x = run, y = time, color = method, shape = model_time)) +
geom_point(alpha = 0.7,
show.legend = c(color = FALSE, shape = TRUE)) +
# geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 3, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
scale_x_continuous(
limits = c(-2,  total_runs + 12),
breaks = 0:50
) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
# ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
benchmark_runs <- list(
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"IONISE" = cached_runtime$ionise,
"diffeqr (R)" = cached_runtime$diffeqr_base_runs,
"diffeqr (Julia)" = cached_runtime$diffeqr_optimized_runs,
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
discrete_time <- c(
"odin", "denim", "denim (nonparametric)", "uSEIR (Python)", "uSEIR (Cython)"
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times),
model_time = if_else(method %in% discrete_time, "discrete", "continuous")
)
})
# Apply log transform if specified
# if (apply_log) {
#   plot_df$time <- log(plot_df$time)
# }
# Compute medians for each method
medians <- plot_df %>%
group_by(method, model_time) %>%
mutate(median_time = median(time)) %>%
ungroup()
# Create the plot
runtime_plot <- ggplot(plot_df, aes(x = run, y = time, color = method, shape = model_time)) +
geom_point(alpha = 0.7,
show.legend = c(color = FALSE, shape = TRUE)) +
# geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 3, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
scale_x_continuous(
limits = c(-2,  total_runs + 12),
breaks = seq(0, 50, 10)
) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
# ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
benchmark_runs <- list(
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"IONISE" = cached_runtime$ionise,
"diffeqr (R)" = cached_runtime$diffeqr_base_runs,
"diffeqr (Julia)" = cached_runtime$diffeqr_optimized_runs,
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
discrete_time <- c(
"odin", "denim", "denim (nonparametric)", "uSEIR (Python)", "uSEIR (Cython)"
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times),
model_time = if_else(method %in% discrete_time, "discrete", "continuous")
)
})
# Apply log transform if specified
# if (apply_log) {
#   plot_df$time <- log(plot_df$time)
# }
# Compute medians for each method
medians <- plot_df %>%
group_by(method, model_time) %>%
mutate(median_time = median(time)) %>%
ungroup()
# Create the plot
runtime_plot <- ggplot(plot_df, aes(x = run, y = time, color = method, shape = model_time)) +
geom_point(alpha = 0.7,
show.legend = c(color = FALSE, shape = TRUE)) +
# geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
geom_segment(
data = medians,
aes(x = -2, xend = total_runs + 2, y = median_time, color = method),
linetype = "dashed",
linewidth = 0.3,
show.legend = FALSE
) +
geom_text(data = medians,
aes(x = total_runs + 3, y = median_time, label = method, color = method),
hjust = 0, size = 2.5, show.legend = FALSE) +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = "Run time (seconds)",
color = "Approach",
shape = "Model time"
) +
scale_x_continuous(
limits = c(-2,  total_runs + 15),
breaks = seq(0, 50, 10)
) +
theme_bw() +
theme(legend.position = "right")
# Apply log scale to y-axis if requested
if (apply_log) {
runtime_plot <- runtime_plot + scale_y_log10() +
labs(y = "Run time (seconds)")
}
runtime_plot
# save plots
ggsave("../manuscript_plots/benchmark_all_log_new.png", width = 8, height = 5, dpi = 300)
?denim
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.align="center"
)
library(DiagrammeR) # for flowchart diagram
library(denim)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I [label = '&#946;S(I + IV)/N']
S -> V [label = '2']
I -> D [label = '0.1 -> d_lognormal(2, 0.5)']
I -> R [label = '0.9 -> d_gamma(1/3, 2)']
V -> IV [label = '0.1 * &#946;V(I + IV)/N']
IV -> R [label = 'd_exponential(2)']
}",
width = 700, height = "100%")
1 - e^(0.2*1)
1 - exp(0.2*1)
1 - exp(0.2*0.01)
1 - exp(0.2*1)
0.2*0.01
1 - exp(-0.2)
0.2*0.01
1 - exp(-0.2*0.01)
devtools::load_all()
library(tidyverse)
# loading cached run time if available
cached_runtime <- if (file.exists("../supplements/cached_runtime.rds")) {
readRDS("../supplements/cached_runtime.rds")
} else {
NULL
}
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> E [label = 'beta * S * (I / N)']
E -> I [label = 'd_gamma(1/4,2)']
I -> R [label = 'd_gamma(1/3,2)']
}",
width = 700, height = "100%")
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
library(reticulate)
# use_python("/opt/anaconda3/envs/bnn/bin/python", required = TRUE)
use_condaenv(condaenv='bnn', required = TRUE)
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
py_run_file("../supplements/useir_python.py")
reticulate::repl_python()
python_runs <- if(is.null(cached_runtime)){
py$python_runs
}else{
cached_runtime$python_runs
}
python_runs
reticulate::repl_python()
