DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> E [label = '(R0/tr) * S * (I / N) * td']
E -> I [label = 'd_gamma(4,2)']
I -> R [label = 'd_gamma(3,2)']
}",
width = 700, height = "100%")
pkgdown::build_article("denim_benchmark")
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 0, R=0)
denim_parameters <- c(beta = 0.2)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 0, R=0)
denim_parameters <- c(beta = 0.2)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 20,
timeStep = 0.01)
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 20,
timeStep = 0.01)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 0, R=0)
denim_parameters <- c(beta = 0.2, N = 1000)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 20,
timeStep = 0.01)
plot(mod)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 0, R=0)
denim_parameters <- c(beta = 0.2, N = 1000, timestepDur=0.01)
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 0, R=0)
denim_parameters <- c(beta = 0.2, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 20,
timeStep = 0.01)
plot(mod)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.2, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 20,
timeStep = 0.01)
plot(mod)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
# ---- Plot S compartment
plot(x = mod$Time, y = mod$S,xlab = "Time", ylab = "Count", main="S compartment",
col = "#4876ff", type="l", lwd=3)
lines(ode_mod$time, ode_mod$S, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = mod$Time, y = mod$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$I, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = mod$Time, y = mod$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$R, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.2, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 20, 0.5) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.2, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 180) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
# For S -> I transition, since it involves parameters (beta, N),
# the best transition to describe this is using a mathematical formula
dS = -beta*S*I/N
# For I -> R transition, linear chain trick is applied --> implies Erlang distributed dwell time
# Hence, we can use d_gamma from denim
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.2, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
# ---- Plot S compartment
plot(x = mod$Time, y = mod$S,xlab = "Time", ylab = "Count", main="S compartment",
col = "#4876ff", type="l", lwd=3)
lines(ode_mod$time, ode_mod$S, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = mod$Time, y = mod$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$I, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = mod$Time, y = mod$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$R, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.2, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 250) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
# For S -> I transition, since it involves parameters (beta, N),
# the best transition to describe this is using a mathematical formula
dS = -beta*S*I/N
# For I -> R transition, linear chain trick is applied --> implies Erlang distributed dwell time
# Hence, we can use d_gamma from denim
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.2, N = 1000, timestepDur=0.01)
# ---- Plot S compartment
plot(x = mod$Time, y = mod$S,xlab = "Time", ylab = "Count", main="S compartment",
col = "#4876ff", type="l", lwd=3)
lines(ode_mod$time, ode_mod$S, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = mod$Time, y = mod$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$I, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = mod$Time, y = mod$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$R, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
library(denim)
library(deSolve)
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.12, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 250) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.12, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
# ---- Plot S compartment
plot(x = mod$Time, y = mod$S,xlab = "Time", ylab = "Count", main="S compartment",
col = "#4876ff", type="l", lwd=3)
lines(ode_mod$time, ode_mod$S, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = mod$Time, y = mod$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$I, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = mod$Time, y = mod$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$R, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
devtools::build()
devtools::load()
devtools::load_all()
library(denim)
library(deSolve)
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.2, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 250) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.2, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
devtools::load_all()
plot(mod)
# Add lines of the other compartments
cmd2 <- ""
devtools::load_all()
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
devtools::load_all()
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
plot(mod)
devtools::load_all()
plot(mod)
library(denim)
library(deSolve)
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.3, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 250) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.3, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 250,
timeStep = 0.01)
plot(mod)
library(denim)
library(deSolve)
# --- Model definition in deSolve
transition_func <- function(t, state, param){
with(as.list( c(state, param) ), {
gamma_rate = 1/scale
dS = -beta*S*I/N
dI1 = beta*S*I/N - gamma_rate*I1
dI2 = gamma_rate*I1 - gamma_rate*I2
dI =  dI1 + dI2
dR = gamma_rate*I2
list(c(dS, dI, dI1, dI2, dR))
})
}
# ---- Model configuration
parameters <- c(beta = 0.3, scale = 3, N = 1000)
initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)
# ---- Run simulation
times <- seq(0, 100) # simulation duration
ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)
# --- show output
ode_mod <- as.data.frame(ode_mod)
head(ode_mod[-1, c("time", "S", "I", "R")])
# --- Transition def for denim
transitions <- list(
"S -> I" = "beta * S * I/N * timestepDur",
"I -> R" = d_gamma(3, 2) # shape is 2 from number of I sub compartments
)
# remove I1, I2 compartments
denim_initialValues <- c(S = 999, I = 1, R=0)
denim_parameters <- c(beta = 0.3, N = 1000, timestepDur=0.01)
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 100,
timeStep = 0.01)
plot(mod)
# ---- Plot S compartment
plot(x = mod$Time, y = mod$S,xlab = "Time", ylab = "Count", main="S compartment",
col = "#4876ff", type="l", lwd=3)
lines(ode_mod$time, ode_mod$S, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot I compartment
plot(x = mod$Time, y = mod$I, xlab = "Time", ylab = "Count", main="I compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$I, lwd=3, lty=3)
legend(x = 15, y = 1e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
# ---- Plot R compartment
plot(x = mod$Time, y = mod$R, xlab = "Time", ylab = "Count", main="R compartment",
col = "#4876ff", type="l", lwd=2)
lines(ode_mod$time, ode_mod$R, lwd=3, lty=3)
legend(x = 15, y = 4e5,legend=c("denim", "deSolve"), col = c("#4876ff", "black"), lty=c(1,3))
pkgdown::build_site()
pkgdown::build_articles(lazy = TRUE)
devtools::document()
pkgdown::build_article("deSolve_to_denim")
pkgdown::build_article("deSolve_to_denim")
?pkgdown::build_article
mod <- sim(transitions = transitions,
initialValues = denim_initialValues,
parameters = denim_parameters,
simulationDuration = 100,
timeStep = 0.01)
plot(mod)
pkgdown::build_article("deSolve_to_denim", new_process=TRUE)
devtools::load_all()
pkgdown::build_article("deSolve_to_denim")
pkgdown::build_article("deSolve_to_denim")
pkgdown::preview_site()
pkgdown::build_article("denim_benchmark")
pkgdown::preview_page('articles/denim_benchmark.html')
?bench::mark
bench::mark(
sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration, timeStep = 0.01),
iterations = 10
)
library(denim)
denim_model <- list(
"S -> E" = "(R0/tr) * timeStepDur * S * (I/N)", # formulate according that of uSEIR method
"E -> I" = d_gamma(scale = 4, shape = 2),
"I -> R" = d_gamma(scale = 3, shape = 2)
)
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6, timeStepDur = 0.01)
bench::mark(
sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration, timeStep = 0.01),
iterations = 10
)
sapply(1:10,
function (i) {
time <- system.time(
sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration, timeStep = 0.01)
)
return(time[["elapsed"]])
})
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> E [label = '(R0/tr) * S * (I / N) * td']
E -> I [label = 'd_gamma(4,2)']
I -> R [label = 'd_gamma(3,2)']
}",
width = 700, height = "100%")
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
library(reticulate)
# use_python("/opt/anaconda3/envs/bnn/bin/python", required = TRUE)
use_condaenv(condaenv='bnn', required = TRUE)
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
py_run_file("../supplements/useir_python.py")
reticulate::repl_python()
