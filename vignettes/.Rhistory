run_useir_odin()
},
iterations = total_runs
)$time[[1]]
}else{
cached_runtime$odin_runs
}
odin_out <- run_useir_odin()
odin_runs
timeStep <- 0.01
errorTolerance <- 0.001
library(denim)
denim_model <- denim_dsl({
S -> E = (R0/tr) * S * (I/N)
E -> I = d_gamma(rate = 1/4, shape = 2)
I -> R = d_gamma(rate = 1/3, shape = 2)
})
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6)
# ---- Get runtimes ----
denim_runs <- if(is.null(cached_runtime)){
bench::mark(
sim(
transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration,
timeStep = timeStep,
errorTolerance = errorTolerance
),
iterations = total_runs
)$time[[1]]
}else{
cached_runtime$denim_runs
}
# ---- Get output ----
denim_out <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration, timeStep = timeStep)
denim_runs
timeStep <- 0.01
errorTolerance <- 0.001
denim_nonparametric_model <- denim_dsl({
S -> E = (R0/tr) * S * (I/N)
E -> I = nonparametric(ei_dist) #ei_dist is considered a model parameter
I -> R = nonparametric(ir_dist) #ir_dist is also a model parameter
})
initialValues2 <- c(S = 999999, E = 1, I= 0, R= 0)
ei_dist <- compute_transprob(pgamma, rate = 1/4, shape = 2,
timestep = timeStep, error_tolerance = errorTolerance)$prob_dist
ir_dist <- compute_transprob(pgamma, rate = 1/3, shape = 2,
timestep = timeStep, error_tolerance = errorTolerance)$prob_dist
parameters2 <- list(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6,
ei_dist = ei_dist,
ir_dist = ir_dist)
# ---- Get runtimes ----
denim_nonparametric_runs <- if(is.null(cached_runtime)){
bench::mark(
sim(transitions = denim_nonparametric_model,
initialValues = initialValues2,
parameters = parameters2,
simulationDuration = sim_duration, timeStep = timeStep),
iterations = total_runs
)$time[[1]]
}else{
cached_runtime$denim_nonparametric_runs
}
# ---- Get output ----
denim_nonparametric_out <- sim(transitions = denim_nonparametric_model,
initialValues = initialValues2,
parameters = parameters2,
simulationDuration = sim_duration, timeStep = timeStep)
denim_nonparametric_runs
library(arrow)
library(reticulate)
library(tidyverse)
df <- as.data.frame(py$to_r_df)
# ---- Preprocess data ---
# comput prop to compare with uSEIR
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- rescaled_denim[, c("S","E", "I", "R")]/1e6
# comput prop for odin output
rescaled_odin <- odin_out
rescaled_odin[, c("S","E", "I", "R")] <- rescaled_odin[, c("S","E", "I", "R")]/1e6
# compute prop for deSolve output as well
rescaled_desolve <- ode_mod
rescaled_desolve[, c("S","E", "I", "R")] <- rescaled_desolve[, c("S","E", "I", "R")]/1e6
# ---- Helper function for plotting ---
plot_output_compare <- function(df, baseline = rescaled_desolve, time_col = "Time", approach = "denim"){
comps <- c("S", "E", "I", "R")
reshape_output <- function(data, label,
values_to = "pop",
names_to = "compartment",
comps = c("S", "E", "I", "R"),
time = "time") {
data %>%
select(all_of(c(time, comps))) %>%
pivot_longer(
cols = comps,
values_to = "pop",
names_to = "compartment"
) %>%
mutate(
approach = label
) %>%
rename(time = {{time}})
}
df <- reshape_output(df, approach, comps = comps, time = time_col)
baseline <- reshape_output(baseline, "deSolve", comps = comps, time = "time")
bind_rows(df, baseline) %>%
ggplot() +
geom_line(
aes(x = time, y = pop, color = approach, linetype = approach),
show.legend = c(color = TRUE, linetype = FALSE))+
facet_wrap(~ compartment, scales = "free") +
scale_color_manual(
labels = c("deSolve", approach),
values = c("black", "cornflowerblue")
) +
theme_bw() +
labs(
x = "Time",
y = "Prop",
title = paste0("Compare output between deSolve and ", approach)
)
}
# ---- Plot and save plot -----
# plot_output_compare(rescaled_denim)
# ggsave("../manuscript_plots/denim_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_odin, time_col = "t", approach = "odin")
# ggsave("../manuscript_plots/odin_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(df, time_col = "t",  approach = "uSEIR")
# ggsave("../manuscript_plots/useir_desolve.png", width = 8, height = 5, dpi = 300)
# plot pairwise comparison
plot_pairwise <- function(df, baseline = rescaled_desolve, time_col = "Time", approach = "denim"){
comps <- c("S", "E", "I", "R")
# create a long-data for plotting
df <- df %>%
select(all_of(c(time_col, comps))) %>%
pivot_longer(
cols = comps,
values_to = "output",
names_to = "comps"
)
baseline <- baseline %>%
select(all_of(c("time", comps))) %>%
pivot_longer(
cols = comps,
values_to = "baseline",
names_to = "comps"
)
baseline %>%
left_join(
df,
by = join_by(time == {{time_col}}, comps == comps)
) %>%
arrange(time) %>%
ggplot() +
geom_point(
aes(x = baseline, y = output),
color = "cornflowerblue",
shape = 20,
show.legend = c(color = TRUE, linetype = FALSE)
) +
# draw the target line
geom_line(
aes(x = baseline, y = baseline),
color = "red",
linetype = "dashed",
show.legend = c(color = TRUE, linetype = FALSE)
) +
facet_wrap(~ comps, scales = "free") +
theme_bw() +
labs(
x = "deSolve (baseline)",
y = approach,
title = paste0("Compare output between deSolve and ", approach),
caption = glue::glue("*Data points closer to the dashed line indicate better alignment between the baseline's and {approach}'s outputs.")
)
}
plot_pairwise(df, time_col = "t",  approach = "uSEIR")
# ggsave("../manuscript_plots/useir_desolve2.png", width = 8, height = 5, dpi = 300)
plot_pairwise(rescaled_denim, time_col = "Time",  approach = "denim")
# ggsave("../manuscript_plots/denim_desolve2.png", width = 8, height = 5, dpi = 300)
plot_pairwise(rescaled_odin, time_col = "t",  approach = "odin")
# ggsave("../manuscript_plots/odin_desolve2.png", width = 8, height = 5, dpi = 300)
# first cache run time if not already available
cached_runtime <- if(is.null(cached_runtime)){
list(
python_runs = python_runs,
cython_runs = cython_runs,
desolve_runs = desolve_runs,
desolve_c_runs = desolve_c_runs,
desolve_fortran_runs = desolve_fortran_runs,
odin_runs = odin_runs,
denim_runs = denim_runs,
denim_nonparametric_runs = denim_nonparametric_runs
)
} else{
cached_runtime
}
saveRDS(cached_runtime, "../supplements/cached_runtime.rds")
benchmark_runs <- list(
"uSEIR (Python)"    = cached_runtime$python_runs,
"uSEIR (Cython)"    = cached_runtime$cython_runs,
"deSolve (R)"       = cached_runtime$desolve_runs,
"deSolve (C)"       = cached_runtime$desolve_c_runs,
"deSolve (Fortran)" = cached_runtime$desolve_fortran_runs,
"odin"              = cached_runtime$odin_runs,
"denim"             = cached_runtime$denim_runs,
"denim (nonparametric)" = cached_runtime$denim_nonparametric_runs
)
apply_log <- TRUE
# Convert list to long format df
plot_df <- imap_dfr(benchmark_runs, \(run_times, method) {
tibble(
method = method,
run = 1:total_runs,
time = as.numeric(run_times)
)
})
# Apply log transform if specified
if (apply_log) {
plot_df$time <- log(plot_df$time)
}
# Compute medians for each method
medians <- plot_df %>%
group_by(method) %>%
mutate(median_time = median(time), .groups = "drop")
# Create the plot
ggplot(plot_df, aes(x = run, y = time, color = method)) +
geom_point(alpha = 0.7) +
geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = if (apply_log) "Log run time (seconds)" else "Run time (seconds)",
color = "Approach"
) +
theme_bw() +
theme(legend.position = "right")
# save plots
# ggsave("../manuscript_plots/benchmark_all_log.png", width = 8, height = 5, dpi = 300)
```
# Create the plot
ggplot(plot_df, aes(x = run, y = time, color = method)) +
geom_point(alpha = 0.7) +
geom_hline(data = medians, aes(yintercept = median_time, color = method), linetype = "dashed") +
# scale_color_manual(values = colors) +
labs(
title = paste0("Run time for ", total_runs, " runs"),
x = "Run",
y = if (apply_log) "Log run time (seconds)" else "Run time (seconds)",
color = "Approach"
) +
theme_bw() +
theme(legend.position = "right")
pkgdown::build_site(lazy=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.align="center"
)
library(DiagrammeR) # for flowchart diagram
library(denim)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I [label = '&#946;SI/N']
I -> R [label = '&#947;I']
}",
width = 300, height = "100%")
rates <- c(0.5, 1, 1.5)
x <- seq(0, 5, 0.001)
y <- dexp(x = x, rate = rates[1])
y2 <- dexp(x = x, rate = rates[2])
y3 <- dexp(x = x, rate = rates[3])
col_codes <- c("#374F77", "#EF9F32", "#6ECBD7")
plot(x, y, type = "l", col = col_codes[1], lty = 1, lwd = 3,
xlab = "Length of stay (days)", ylab = "",
ylim = c(0, 1.5), yaxt = 'n')
lines(x, y2, col = col_codes[2], lty = 1, lwd = 3)
lines(x, y3, col = col_codes[3], lty = 1, lwd = 3)
legend("right", legend = c(0.5, 1.0, 1.5),
col = col_codes, lty = 1, lwd = 3, bty = "\n")
x <- seq(0, 20, 0.001)
y <- dgamma(x = x, shape = 3, rate = 1/2)
plot(x, y, type = "l", col = col_codes[1], lty = 1, lwd = 3,
xlab = "Length of stay (days)", ylab = "", yaxt = 'n')
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I [label = '&#946;SI/N']
I -> R [label = 'd_gamma(1/2, 3)']
}",
width = 400, height = "100%")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I [label = '&#946;SI/N']
I -> R [label = 'd_gamma(1/2, 3)']
}",
width = 400, height = "100%")
transitions <- list(
"S -> I" = "beta * S * I / N",
"I -> R" = d_gamma(rate = 1/2, 3)
)
transitions <- denim_dsl({
S -> I = beta * (I/N) * S
I -> R = d_gamma(rate = 1/4, shape = 3)
})
initialValues <- c(
S = 999,
I = 1,
R = 0
)
parameters <- c(
beta = 1.2,
N = 1000
)
simulationDuration <- 30
timeStep <- 0.01
mod <- sim(transitions = transitions,
initialValues = initialValues,
parameters = parameters,
simulationDuration = simulationDuration,
timeStep = timeStep)
head(mod)
plot(mod)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I [label = '&#946;SI/N']
I -> R [label = '&#947;I']
}",
width = 300, height = "100%")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I1 [label = '&#946;S(I@_{1} + I@_{2} + I@_{3} + I@_{4})/N']
I1 -> R1 [label = '&#947;@_{1}I@_{1}']
I2 -> R2 [label = '&#947;@_{2}I@_{2}']
I3 -> R3 [label = '&#947;@_{3}I@_{3}']
I4 -> R4 [label = 'I@_{4}']
I1 -> I2 [label = '(1-&#947;@_{1})I@_{1}']
I2 -> I3 [label = '(1-&#947;@_{2})I@_{2}']
I3 -> I4 [label = '(1-&#947;@_{3})I@_{3}']
}", height = "100%", width = "100%")
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> I [label = '&#946;SI/N']
S -> V [label = '5']
I -> R [label = '0.9 -> d_gamma(1/3, 2)']
I -> D [label = '0.1 -> d_lognormal(2, 0.5)']
}",
width = 500, height = "100%")
transitions <- denim_dsl({
S -> I = beta * S * I / N
S -> V = 5
0.9 * I -> R = d_gamma(1/3, 2)
0.1 * I -> D = d_lognormal(2, 0.5)
})
initialValues <- c(
S = 999,
I = 1,
R = 0,
V = 0,
D = 0
)
parameters <- c(
beta = 1.2,
N = 1000
)
simulationDuration <- 10
timeStep <- 0.01
mod <- sim(transitions = transitions,
initialValues = initialValues,
parameters = parameters,
simulationDuration = simulationDuration,
timeStep = timeStep)
head(mod)
plot(mod, ylim = c(0, 1000))
transitions <- denim_dsl({
S -> I = beta * S * I / N
S -> V = 5
0.9 * I -> R = d_gamma(1/3, 2)
0.1 * I -> D = d_lognormal(2, 0.5)
})
initialValues <- c(
S = 999,
I = 1,
R = 0,
V = 0,
D = 0
)
parameters <- c(
beta = 1.2,
N = 1000
)
simulationDuration <- 20
timeStep <- 0.01
mod <- sim(transitions = transitions,
initialValues = initialValues,
parameters = parameters,
simulationDuration = simulationDuration,
timeStep = timeStep)
head(mod)
plot(mod, ylim = c(0, 1000))
transitions <- denim_dsl({
S -> I = beta * S * (I + IV) / N
S -> V = 2
0.1 * I -> D = d_lognormal(mu = d_mu, sigma = d_sigma)
0.9 * I -> R = d_gamma(rate = r_rate, shape = r_shape)
V -> IV = 0.1 * beta * V * (I + IV) / N
IV -> R = d_exponential(iv_r_rate)
})
initialValues <- c(
S = 999,
I = 1,
R = 0,
V = 0,
IV = 0,
D = 0
)
parameters <- c(
beta = 1.2,
N = 1000,
d_mu = 2,
d_sigma = 1/2,
r_rate = 1/3,
r_shape = 2,
iv_r_rate = 2
)
simulationDuration <- 10
timeStep <- 0.01
mod <- sim(transitions = transitions,
initialValues = initialValues,
parameters = parameters,
simulationDuration = simulationDuration,
timeStep = timeStep)
plot(mod)
head(mod)
transitions <- denim_dsl({
S -> I = beta * S * (I + IV) / N
S -> V = 2
0.1 * I -> D = d_lognormal(mu = d_mu, sigma = d_sigma)
0.9 * I -> R = d_gamma(rate = r_rate, shape = r_shape)
V -> IV = 0.1 * beta * V * (I + IV) / N
IV -> R = d_exponential(iv_r_rate)
})
initialValues <- c(
S = 999,
I = 1,
R = 0,
V = 0,
IV = 0,
D = 0
)
parameters <- c(
beta = 1.2,
N = 1000,
d_mu = 2,
d_sigma = 1/2,
r_rate = 1/3,
r_shape = 2,
iv_r_rate = 2
)
simulationDuration <- 20
timeStep <- 0.01
mod <- sim(transitions = transitions,
initialValues = initialValues,
parameters = parameters,
simulationDuration = simulationDuration,
timeStep = timeStep)
plot(mod)
head(mod)
# loading cached run time if available
cached_runtime <- if (file.exists("../supplements/cached_runtime.rds")) {
readRDS("../supplements/cached_runtime.rds")
} else {
NULL
}
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> E [label = 'beta * S * (I / N)']
E -> I [label = 'd_gamma(1/4,2)']
I -> R [label = 'd_gamma(1/3,2)']
}",
width = 700, height = "100%")
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
library(reticulate)
# use_python("/opt/anaconda3/envs/bnn/bin/python", required = TRUE)
use_condaenv(condaenv='bnn', required = TRUE)
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
py_run_file("../supplements/useir_python.py")
reticulate::repl_python()
python_runs <- if(is.null(cached_runtime)){
py$python_runs
}else{
cached_runtime$python_runs
}
reticulate::repl_python()
