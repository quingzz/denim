prob_dist = prob_dist,
cumulative_dist = cumulative_dist,
transprob = transprob
)
}
timeStep <- 0.01
errorTolerance <- 0.001
run_useir_odin <- function(){
# ---- Compute transprob -----
e_transprob <- compute_transprob(pgamma, rate=1/4, shape=2,
timestep = timeStep, error_tolerance = errorTolerance)$transprob
i_transprob <- compute_transprob(pgamma, rate=1/3, shape=2,
timestep = timeStep, error_tolerance = errorTolerance)$transprob
# ---- Run model and plot -----
# initialize params
odin_pars <- list(
R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6,
e_transprob = e_transprob,
e_maxtime = length(e_transprob),
i_transprob = i_transprob,
i_maxtime = length(i_transprob),
S_init = 999999,
E_init = array( c(1, rep(0, length(e_transprob) - 1) ) ),
I_init = array( rep(0, length(i_transprob)) ),
R_init = 0
)
# run model
t_seq <- seq(0, sim_duration, 0.25)
odin_seir <- dust2::dust_system_create(odin_mod, odin_pars, dt = timeStep)
dust2::dust_system_set_state_initial(odin_seir)
out <- dust2::dust_system_simulate(odin_seir, t_seq)
out <- dust2::dust_unpack_state(odin_seir, out)
data.frame(
t = t_seq,
S = out$S,
E = colSums(out$E),
I = colSums(out$I),
R = out$R
)
}
# ---- Get runtimes ----
odin_runs <- if(is.null(cached_runtime)){
bench::mark({
run_useir_odin()
},
iterations = total_runs
)$time[[1]]
}else{
cached_runtime$odin_runs
}
odin_out <- run_useir_odin()
odin_runs
timeStep <- 0.01
errorTolerance <- 0.001
library(denim)
denim_model <- denim_dsl({
S -> E = (R0/tr) * S * (I/N)
E -> I = d_gamma(rate = 1/4, shape = 2)
I -> R = d_gamma(rate = 1/3, shape = 2)
})
initialValues <- c(S = 999999, E = 1, I= 0, R= 0)
parameters <- c(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6)
# ---- Get runtimes ----
denim_runs <- if(is.null(cached_runtime)){
bench::mark(
sim(
transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration,
timeStep = timeStep,
errorTolerance = errorTolerance
),
iterations = total_runs
)$time[[1]]
}else{
cached_runtime$denim_runs
}
# ---- Get output ----
denim_out <- sim(transitions = denim_model,
initialValues = initialValues,
parameters = parameters,
simulationDuration = sim_duration, timeStep = timeStep)
plot(denim_out)
denim_runs
timeStep <- 0.01
errorTolerance <- 0.001
denim_nonparametric_model <- denim_dsl({
S -> E = (R0/tr) * S * (I/N)
E -> I = nonparametric(ei_dist) #ei_dist is considered a model parameter
I -> R = nonparametric(ir_dist) #ir_dist is also a model parameter
})
initialValues2 <- c(S = 999999, E = 1, I= 0, R= 0)
ei_dist <- compute_transprob(pgamma, rate = 1/4, shape = 2,
timestep = timeStep, error_tolerance = errorTolerance)$prob_dist
ir_dist <- compute_transprob(pgamma, rate = 1/3, shape = 2,
timestep = timeStep, error_tolerance = errorTolerance)$prob_dist
parameters2 <- list(R0 = 3.5,
tr = 3*2, # compute mean recovery time, for gamma it's scale*shape
N = 1e6,
ei_dist = ei_dist,
ir_dist = ir_dist)
# ---- Get runtimes ----
denim_nonparametric_runs <- if(is.null(cached_runtime)){
bench::mark(
sim(transitions = denim_nonparametric_model,
initialValues = initialValues2,
parameters = parameters2,
simulationDuration = sim_duration, timeStep = timeStep),
iterations = total_runs
)$time[[1]]
}else{
cached_runtime$denim_nonparametric_runs
}
# ---- Get output ----
denim_nonparametric_out <- sim(transitions = denim_nonparametric_model,
initialValues = initialValues2,
parameters = parameters2,
simulationDuration = sim_duration, timeStep = timeStep)
denim_nonparametric_runs
library(arrow)
library(reticulate)
library(tidyverse)
df <- as.data.frame(py$to_r_df)
# ---- Preprocess data ---
# compute prop to compare with uSEIR
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- rescaled_denim[, c("S","E", "I", "R")]/1e6
# compute prop for odin output
rescaled_odin <- odin_out
rescaled_odin[, c("S","E", "I", "R")] <- rescaled_odin[, c("S","E", "I", "R")]/1e6
# compute prop for IONISE output
rescaled_ionise <- ionise_out
rescaled_ionise[, c("S","E", "I", "R")] <- rescaled_ionise[, c("S","E", "I", "R")]/1e6
# compute prop for diffeqr output
rescaled_diffeqr <- diffeqr_out
rescaled_diffeqr[, c("S","E", "I", "R")] <- rescaled_diffeqr[, c("S","E", "I", "R")]/1e6
# compute prop for deSolve output as well
rescaled_desolve <- ode_mod
rescaled_desolve[, c("S","E", "I", "R")] <- rescaled_desolve[, c("S","E", "I", "R")]/1e6
# ---- Helper function for plotting ---
plot_output_compare <- function(df, baseline = rescaled_desolve, time_col = "Time", approach = "denim"){
comps <- c("S", "E", "I", "R")
reshape_output <- function(data, label,
values_to = "pop",
names_to = "compartment",
comps = c("S", "E", "I", "R"),
time = "time") {
data %>%
select(all_of(c(time, comps))) %>%
pivot_longer(
cols = comps,
values_to = "pop",
names_to = "compartment"
) %>%
mutate(
approach = label
) %>%
rename(time = {{time}})
}
df <- reshape_output(df, approach, comps = comps, time = time_col)
baseline <- reshape_output(baseline, "deSolve", comps = comps, time = "time")
bind_rows(df, baseline) %>%
ggplot() +
geom_line(
aes(x = time, y = pop, color = approach, linetype = approach),
show.legend = c(color = TRUE, linetype = FALSE))+
facet_wrap(~ compartment, scales = "free") +
scale_color_manual(
labels = c("deSolve", approach),
values = c("black", "cornflowerblue")
) +
theme_bw() +
labs(
x = "Time",
y = "Prop",
title = paste0("Compare output between deSolve and ", approach)
)
}
# ---- Plot and save plot -----
# plot_output_compare(rescaled_denim)
# ggsave("../manuscript_plots/denim_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_odin, time_col = "t", approach = "odin")
# ggsave("../manuscript_plots/odin_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(df, time_col = "t",  approach = "uSEIR")
# ggsave("../manuscript_plots/useir_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_ionise, time_col = "time",  approach = "IONISE")
plot_output_compare(rescaled_diffeqr, time_col = "time",  approach = "diffeqr")
# we can use initialValues and parameters set up for deSolve
diffeqr_mod <- setup$ODEProblem(diffeqr_transition,
initialValues,
diffeqr_time,
parameters)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,
scale_R = 3, shape_R = 2, N = 1e6)
# --- Transition def for diffeqr ------
diffeqr_transition <- function(u, p, t){
# p - gamma_rate_I, shape_I, gamma_rate_R, shape_R, R0, N
# u - S, E1, E2, E, I1, I2, I, R
tr = p[4]*(1/p[3])
dS = - (p[5]/tr) * u[1] * u[7]/p[6]
# apply linear chain trick
dE1 = (p[5]/tr) * u[1] * u[7]/p[6] - p[1]*u[2]
dE2 = p[1]*u[2] - p[1]*u[3]
dE = dE1 + dE2
dI1 = p[1]*u[3] - p[3]*u[5]
dI2 = p[3]*u[5] - p[3]*u[6]
dI =  dI1 + dI2
dR = p[3]*u[6]
return(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))
}
diffeqr_time <- c(0, sim_duration)
# set up diffeqr solverr
setup <- diffeq_setup()
# we can use initialValues and parameters set up for deSolve
diffeqr_mod <- setup$ODEProblem(diffeqr_transition,
initialValues,
diffeqr_time,
parameters)
sol <- setup$solve(diffeqr_mod)
out_mat <- sapply(sol$u,identity)
# convert to data.frame
diffeqr_out <- as.data.frame(t(out_mat))
# add names
names(diffeqr_out) <- names(initialValues)
# add time column
diffeqr_out <- diffeqr_out %>% mutate(
time = identity(sol$t)
)
library(arrow)
library(reticulate)
library(tidyverse)
df <- as.data.frame(py$to_r_df)
# ---- Preprocess data ---
# compute prop to compare with uSEIR
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- rescaled_denim[, c("S","E", "I", "R")]/1e6
# compute prop for odin output
rescaled_odin <- odin_out
rescaled_odin[, c("S","E", "I", "R")] <- rescaled_odin[, c("S","E", "I", "R")]/1e6
# compute prop for IONISE output
rescaled_ionise <- ionise_out
rescaled_ionise[, c("S","E", "I", "R")] <- rescaled_ionise[, c("S","E", "I", "R")]/1e6
# compute prop for diffeqr output
rescaled_diffeqr <- diffeqr_out
rescaled_diffeqr[, c("S","E", "I", "R")] <- rescaled_diffeqr[, c("S","E", "I", "R")]/1e6
# compute prop for deSolve output as well
rescaled_desolve <- ode_mod
rescaled_desolve[, c("S","E", "I", "R")] <- rescaled_desolve[, c("S","E", "I", "R")]/1e6
# ---- Helper function for plotting ---
plot_output_compare <- function(df, baseline = rescaled_desolve, time_col = "Time", approach = "denim"){
comps <- c("S", "E", "I", "R")
reshape_output <- function(data, label,
values_to = "pop",
names_to = "compartment",
comps = c("S", "E", "I", "R"),
time = "time") {
data %>%
select(all_of(c(time, comps))) %>%
pivot_longer(
cols = comps,
values_to = "pop",
names_to = "compartment"
) %>%
mutate(
approach = label
) %>%
rename(time = {{time}})
}
df <- reshape_output(df, approach, comps = comps, time = time_col)
baseline <- reshape_output(baseline, "deSolve", comps = comps, time = "time")
bind_rows(df, baseline) %>%
ggplot() +
geom_line(
aes(x = time, y = pop, color = approach, linetype = approach),
show.legend = c(color = TRUE, linetype = FALSE))+
facet_wrap(~ compartment, scales = "free") +
scale_color_manual(
labels = c("deSolve", approach),
values = c("black", "cornflowerblue")
) +
theme_bw() +
labs(
x = "Time",
y = "Prop",
title = paste0("Compare output between deSolve and ", approach)
)
}
# ---- Plot and save plot -----
# plot_output_compare(rescaled_denim)
# ggsave("../manuscript_plots/denim_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_odin, time_col = "t", approach = "odin")
# ggsave("../manuscript_plots/odin_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(df, time_col = "t",  approach = "uSEIR")
# ggsave("../manuscript_plots/useir_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_ionise, time_col = "time",  approach = "IONISE")
plot_output_compare(rescaled_diffeqr, time_col = "time",  approach = "diffeqr")
# ---- Parameter setup -----
parameters <- c(gamma_rate_I = 1/4, shape_I=2,
gamma_rate_R = 1/3, shape_R = 2,
R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
# set up diffeqr solverr
setup <- diffeq_setup()
# we can use initialValues and parameters set up for deSolve
diffeqr_mod <- setup$ODEProblem(diffeqr_transition,
initialValues,
diffeqr_time,
parameters)
library(arrow)
library(reticulate)
library(tidyverse)
df <- as.data.frame(py$to_r_df)
# ---- Preprocess data ---
# compute prop to compare with uSEIR
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- rescaled_denim[, c("S","E", "I", "R")]/1e6
# compute prop for odin output
rescaled_odin <- odin_out
rescaled_odin[, c("S","E", "I", "R")] <- rescaled_odin[, c("S","E", "I", "R")]/1e6
# compute prop for IONISE output
rescaled_ionise <- ionise_out
rescaled_ionise[, c("S","E", "I", "R")] <- rescaled_ionise[, c("S","E", "I", "R")]/1e6
# compute prop for diffeqr output
rescaled_diffeqr <- diffeqr_out
rescaled_diffeqr[, c("S","E", "I", "R")] <- rescaled_diffeqr[, c("S","E", "I", "R")]/1e6
# compute prop for deSolve output as well
rescaled_desolve <- ode_mod
rescaled_desolve[, c("S","E", "I", "R")] <- rescaled_desolve[, c("S","E", "I", "R")]/1e6
# ---- Helper function for plotting ---
plot_output_compare <- function(df, baseline = rescaled_desolve, time_col = "Time", approach = "denim"){
comps <- c("S", "E", "I", "R")
reshape_output <- function(data, label,
values_to = "pop",
names_to = "compartment",
comps = c("S", "E", "I", "R"),
time = "time") {
data %>%
select(all_of(c(time, comps))) %>%
pivot_longer(
cols = comps,
values_to = "pop",
names_to = "compartment"
) %>%
mutate(
approach = label
) %>%
rename(time = {{time}})
}
df <- reshape_output(df, approach, comps = comps, time = time_col)
baseline <- reshape_output(baseline, "deSolve", comps = comps, time = "time")
bind_rows(df, baseline) %>%
ggplot() +
geom_line(
aes(x = time, y = pop, color = approach, linetype = approach),
show.legend = c(color = TRUE, linetype = FALSE))+
facet_wrap(~ compartment, scales = "free") +
scale_color_manual(
labels = c("deSolve", approach),
values = c("black", "cornflowerblue")
) +
theme_bw() +
labs(
x = "Time",
y = "Prop",
title = paste0("Compare output between deSolve and ", approach)
)
}
# ---- Plot and save plot -----
# plot_output_compare(rescaled_denim)
# ggsave("../manuscript_plots/denim_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_odin, time_col = "t", approach = "odin")
# ggsave("../manuscript_plots/odin_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(df, time_col = "t",  approach = "uSEIR")
# ggsave("../manuscript_plots/useir_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_ionise, time_col = "time",  approach = "IONISE")
plot_output_compare(rescaled_diffeqr, time_col = "time",  approach = "diffeqr")
diffeqr_time <- c(0, sim_duration)
# ---- Parameter setup -----
parameters <- c(gamma_rate_I = 1/4, shape_I=2,
gamma_rate_R = 1/3, shape_R = 2,
R0 = 3.5, N = 1e6)
initialValues <- c(S = 999999, E1 = 1,
E2 = 0, E = 0, I1=0,
I2=0, I=0, R=0
)
# set up diffeqr solverr
setup <- diffeq_setup()
# we can use initialValues and parameters set up for deSolve
diffeqr_mod <- setup$ODEProblem(diffeqr_transition,
initialValues,
diffeqr_time,
parameters)
sol <- setup$solve(diffeqr_mod)
out_mat <- sapply(sol$u,identity)
# convert to data.frame
diffeqr_out <- as.data.frame(t(out_mat))
# add names
names(diffeqr_out) <- names(initialValues)
# add time column
diffeqr_out <- diffeqr_out %>% mutate(
time = identity(sol$t)
)
library(arrow)
library(reticulate)
library(tidyverse)
df <- as.data.frame(py$to_r_df)
# ---- Preprocess data ---
# compute prop to compare with uSEIR
rescaled_denim <- denim_out
rescaled_denim[, c("S","E", "I", "R")] <- rescaled_denim[, c("S","E", "I", "R")]/1e6
# compute prop for odin output
rescaled_odin <- odin_out
rescaled_odin[, c("S","E", "I", "R")] <- rescaled_odin[, c("S","E", "I", "R")]/1e6
# compute prop for IONISE output
rescaled_ionise <- ionise_out
rescaled_ionise[, c("S","E", "I", "R")] <- rescaled_ionise[, c("S","E", "I", "R")]/1e6
# compute prop for diffeqr output
rescaled_diffeqr <- diffeqr_out
rescaled_diffeqr[, c("S","E", "I", "R")] <- rescaled_diffeqr[, c("S","E", "I", "R")]/1e6
# compute prop for deSolve output as well
rescaled_desolve <- ode_mod
rescaled_desolve[, c("S","E", "I", "R")] <- rescaled_desolve[, c("S","E", "I", "R")]/1e6
# ---- Helper function for plotting ---
plot_output_compare <- function(df, baseline = rescaled_desolve, time_col = "Time", approach = "denim"){
comps <- c("S", "E", "I", "R")
reshape_output <- function(data, label,
values_to = "pop",
names_to = "compartment",
comps = c("S", "E", "I", "R"),
time = "time") {
data %>%
select(all_of(c(time, comps))) %>%
pivot_longer(
cols = comps,
values_to = "pop",
names_to = "compartment"
) %>%
mutate(
approach = label
) %>%
rename(time = {{time}})
}
df <- reshape_output(df, approach, comps = comps, time = time_col)
baseline <- reshape_output(baseline, "deSolve", comps = comps, time = "time")
bind_rows(df, baseline) %>%
ggplot() +
geom_line(
aes(x = time, y = pop, color = approach, linetype = approach),
show.legend = c(color = TRUE, linetype = FALSE))+
facet_wrap(~ compartment, scales = "free") +
scale_color_manual(
labels = c("deSolve", approach),
values = c("black", "cornflowerblue")
) +
theme_bw() +
labs(
x = "Time",
y = "Prop",
title = paste0("Compare output between deSolve and ", approach)
)
}
# ---- Plot and save plot -----
# plot_output_compare(rescaled_denim)
# ggsave("../manuscript_plots/denim_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_odin, time_col = "t", approach = "odin")
# ggsave("../manuscript_plots/odin_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(df, time_col = "t",  approach = "uSEIR")
# ggsave("../manuscript_plots/useir_desolve.png", width = 8, height = 5, dpi = 300)
# plot_output_compare(rescaled_ionise, time_col = "time",  approach = "IONISE")
plot_output_compare(rescaled_diffeqr, time_col = "time",  approach = "diffeqr")
# loading cached run time if available
cached_runtime <- if (file.exists("../supplements/cached_runtime.rds")) {
readRDS("../supplements/cached_runtime.rds")
} else {
NULL
}
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
node [shape = rectangle]
S -> E [label = 'beta * S * (I / N)']
E -> I [label = 'd_gamma(1/4,2)']
I -> R [label = 'd_gamma(1/3,2)']
}",
width = 700, height = "100%")
total_runs <- 50L # number of runs
sim_duration <- 180 # duration of simulation
library(reticulate)
# use_python("/opt/anaconda3/envs/bnn/bin/python", required = TRUE)
use_condaenv(condaenv='bnn', required = TRUE)
matplotlib <- import("matplotlib")
matplotlib$use("Agg", force = TRUE)
py_run_file("../supplements/useir_python.py")
reticulate::repl_python()
python_runs <- if(is.null(cached_runtime)){
py$python_runs
}else{
cached_runtime$python_runs
}
python_runs
reticulate::repl_python()
